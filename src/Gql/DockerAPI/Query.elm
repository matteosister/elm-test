-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.DockerAPI.Query exposing (..)

import Gql.DockerAPI.InputObject
import Gql.DockerAPI.Interface
import Gql.DockerAPI.Object
import Gql.DockerAPI.Scalar
import Gql.DockerAPI.ScalarCodecs
import Gql.DockerAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| System-wide information
-}
system : SelectionSet decodesTo Gql.DockerAPI.Object.System -> SelectionSet (Maybe decodesTo) RootQuery
system object_ =
    Object.selectionForCompositeField "system" [] object_ (identity >> Decode.nullable)


{-| Return more details about the Swarm. Requires Docker API >= 1.24
-}
swarm : SelectionSet decodesTo Gql.DockerAPI.Object.Swarm -> SelectionSet (Maybe decodesTo) RootQuery
swarm object_ =
    Object.selectionForCompositeField "swarm" [] object_ (identity >> Decode.nullable)


type alias ContainersOptionalArguments =
    { all : OptionalArgument Bool
    , limit : OptionalArgument Int
    , size : OptionalArgument Bool
    , filter : OptionalArgument Gql.DockerAPI.InputObject.ContainerFilter
    }


{-| List containers matching various filters

  - all -
  - limit -
  - size -
  - filter -

-}
containers : (ContainersOptionalArguments -> ContainersOptionalArguments) -> SelectionSet decodesTo Gql.DockerAPI.Object.Container -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
containers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { all = Absent, limit = Absent, size = Absent, filter = Absent }

        optionalArgs =
            [ Argument.optional "all" filledInOptionals.all Encode.bool, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "size" filledInOptionals.size Encode.bool, Argument.optional "filter" filledInOptionals.filter Gql.DockerAPI.InputObject.encodeContainerFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "containers" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ImagesOptionalArguments =
    { all : OptionalArgument Bool
    , digests : OptionalArgument Bool
    , filter : OptionalArgument Gql.DockerAPI.InputObject.ImageFilter
    }


{-| List images matching various filters

  - all -
  - digests -
  - filter -

-}
images : (ImagesOptionalArguments -> ImagesOptionalArguments) -> SelectionSet decodesTo Gql.DockerAPI.Object.Image -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
images fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { all = Absent, digests = Absent, filter = Absent }

        optionalArgs =
            [ Argument.optional "all" filledInOptionals.all Encode.bool, Argument.optional "digests" filledInOptionals.digests Encode.bool, Argument.optional "filter" filledInOptionals.filter Gql.DockerAPI.InputObject.encodeImageFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "images" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias SearchImagesOnDockerHubRequiredArguments =
    { term : String }


{-| Search images on Docker Hub

  - term -

-}
searchImagesOnDockerHub : SearchImagesOnDockerHubRequiredArguments -> SelectionSet decodesTo Gql.DockerAPI.Object.ImageSearchResult -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
searchImagesOnDockerHub requiredArgs object_ =
    Object.selectionForCompositeField "searchImagesOnDockerHub" [ Argument.required "term" requiredArgs.term Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias VolumesOptionalArguments =
    { filter : OptionalArgument Gql.DockerAPI.InputObject.VolumeFilter }


{-| List volumes matching various filters

  - filter -

-}
volumes : (VolumesOptionalArguments -> VolumesOptionalArguments) -> SelectionSet decodesTo Gql.DockerAPI.Object.VolumeList -> SelectionSet (Maybe decodesTo) RootQuery
volumes fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Gql.DockerAPI.InputObject.encodeVolumeFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "volumes" optionalArgs object_ (identity >> Decode.nullable)


type alias NetworksOptionalArguments =
    { filter : OptionalArgument Gql.DockerAPI.InputObject.NetworkFilter }


{-| List networks matching various filters

  - filter -

-}
networks : (NetworksOptionalArguments -> NetworksOptionalArguments) -> SelectionSet decodesTo Gql.DockerAPI.Object.Network -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
networks fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Gql.DockerAPI.InputObject.encodeNetworkFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "networks" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
