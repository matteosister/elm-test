-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.DockerAPI.InputObject exposing (..)

import Gql.DockerAPI.Enum.ContainerHealth
import Gql.DockerAPI.Enum.ContainerIsolation
import Gql.DockerAPI.Enum.ContainerStatus
import Gql.DockerAPI.Enum.NetworkScope
import Gql.DockerAPI.Enum.NetworkType
import Gql.DockerAPI.Enum.NodeMembership
import Gql.DockerAPI.Enum.NodeRole
import Gql.DockerAPI.Interface
import Gql.DockerAPI.Object
import Gql.DockerAPI.Scalar
import Gql.DockerAPI.ScalarCodecs
import Gql.DockerAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildContainerFilter : (ContainerFilterOptionalFields -> ContainerFilterOptionalFields) -> ContainerFilter
buildContainerFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { ancestor = Absent, before = Absent, expose = Absent, exited = Absent, health = Absent, id = Absent, isolation = Absent, is_task = Absent, label = Absent, name = Absent, network = Absent, publish = Absent, since = Absent, status = Absent, volume = Absent }
    in
    { ancestor = optionals.ancestor, before = optionals.before, expose = optionals.expose, exited = optionals.exited, health = optionals.health, id = optionals.id, isolation = optionals.isolation, is_task = optionals.is_task, label = optionals.label, name = optionals.name, network = optionals.network, publish = optionals.publish, since = optionals.since, status = optionals.status, volume = optionals.volume }


type alias ContainerFilterOptionalFields =
    { ancestor : OptionalArgument (List (Maybe String))
    , before : OptionalArgument (List (Maybe String))
    , expose : OptionalArgument (List (Maybe String))
    , exited : OptionalArgument (List (Maybe Int))
    , health : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerHealth.ContainerHealth))
    , id : OptionalArgument (List (Maybe String))
    , isolation : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerIsolation.ContainerIsolation))
    , is_task : OptionalArgument (List (Maybe Bool))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    , network : OptionalArgument (List (Maybe String))
    , publish : OptionalArgument (List (Maybe String))
    , since : OptionalArgument (List (Maybe String))
    , status : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerStatus.ContainerStatus))
    , volume : OptionalArgument (List (Maybe String))
    }


{-| Type for the ContainerFilter input object.
-}
type alias ContainerFilter =
    { ancestor : OptionalArgument (List (Maybe String))
    , before : OptionalArgument (List (Maybe String))
    , expose : OptionalArgument (List (Maybe String))
    , exited : OptionalArgument (List (Maybe Int))
    , health : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerHealth.ContainerHealth))
    , id : OptionalArgument (List (Maybe String))
    , isolation : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerIsolation.ContainerIsolation))
    , is_task : OptionalArgument (List (Maybe Bool))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    , network : OptionalArgument (List (Maybe String))
    , publish : OptionalArgument (List (Maybe String))
    , since : OptionalArgument (List (Maybe String))
    , status : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.ContainerStatus.ContainerStatus))
    , volume : OptionalArgument (List (Maybe String))
    }


{-| Encode a ContainerFilter into a value that can be used as an argument.
-}
encodeContainerFilter : ContainerFilter -> Value
encodeContainerFilter input =
    Encode.maybeObject
        [ ( "ancestor", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.ancestor ), ( "before", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.before ), ( "expose", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.expose ), ( "exited", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input.exited ), ( "health", (Encode.enum Gql.DockerAPI.Enum.ContainerHealth.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.health ), ( "id", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.id ), ( "isolation", (Encode.enum Gql.DockerAPI.Enum.ContainerIsolation.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.isolation ), ( "is_task", (Encode.bool |> Encode.maybe |> Encode.list) |> Encode.optional input.is_task ), ( "label", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.label ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "network", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.network ), ( "publish", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.publish ), ( "since", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.since ), ( "status", (Encode.enum Gql.DockerAPI.Enum.ContainerStatus.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.status ), ( "volume", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.volume ) ]


buildImageFilter : (ImageFilterOptionalFields -> ImageFilterOptionalFields) -> ImageFilter
buildImageFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { before = Absent, dangling = Absent, label = Absent, reference = Absent, since = Absent }
    in
    { before = optionals.before, dangling = optionals.dangling, label = optionals.label, reference = optionals.reference, since = optionals.since }


type alias ImageFilterOptionalFields =
    { before : OptionalArgument (List (Maybe String))
    , dangling : OptionalArgument (List (Maybe Bool))
    , label : OptionalArgument (List (Maybe String))
    , reference : OptionalArgument (List (Maybe String))
    , since : OptionalArgument (List (Maybe String))
    }


{-| Type for the ImageFilter input object.
-}
type alias ImageFilter =
    { before : OptionalArgument (List (Maybe String))
    , dangling : OptionalArgument (List (Maybe Bool))
    , label : OptionalArgument (List (Maybe String))
    , reference : OptionalArgument (List (Maybe String))
    , since : OptionalArgument (List (Maybe String))
    }


{-| Encode a ImageFilter into a value that can be used as an argument.
-}
encodeImageFilter : ImageFilter -> Value
encodeImageFilter input =
    Encode.maybeObject
        [ ( "before", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.before ), ( "dangling", (Encode.bool |> Encode.maybe |> Encode.list) |> Encode.optional input.dangling ), ( "label", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.label ), ( "reference", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.reference ), ( "since", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.since ) ]


buildNetworkFilter : (NetworkFilterOptionalFields -> NetworkFilterOptionalFields) -> NetworkFilter
buildNetworkFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { driver = Absent, id = Absent, label = Absent, name = Absent, scope = Absent, type_ = Absent }
    in
    { driver = optionals.driver, id = optionals.id, label = optionals.label, name = optionals.name, scope = optionals.scope, type_ = optionals.type_ }


type alias NetworkFilterOptionalFields =
    { driver : OptionalArgument (List (Maybe String))
    , id : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    , scope : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NetworkScope.NetworkScope))
    , type_ : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NetworkType.NetworkType))
    }


{-| Type for the NetworkFilter input object.
-}
type alias NetworkFilter =
    { driver : OptionalArgument (List (Maybe String))
    , id : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    , scope : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NetworkScope.NetworkScope))
    , type_ : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NetworkType.NetworkType))
    }


{-| Encode a NetworkFilter into a value that can be used as an argument.
-}
encodeNetworkFilter : NetworkFilter -> Value
encodeNetworkFilter input =
    Encode.maybeObject
        [ ( "driver", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.driver ), ( "id", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.id ), ( "label", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.label ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "scope", (Encode.enum Gql.DockerAPI.Enum.NetworkScope.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.scope ), ( "type", (Encode.enum Gql.DockerAPI.Enum.NetworkType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.type_ ) ]


buildNodeFilter : (NodeFilterOptionalFields -> NodeFilterOptionalFields) -> NodeFilter
buildNodeFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, label = Absent, membership = Absent, name = Absent, role = Absent }
    in
    { id = optionals.id, label = optionals.label, membership = optionals.membership, name = optionals.name, role = optionals.role }


type alias NodeFilterOptionalFields =
    { id : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , membership : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NodeMembership.NodeMembership))
    , name : OptionalArgument (List (Maybe String))
    , role : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NodeRole.NodeRole))
    }


{-| Type for the NodeFilter input object.
-}
type alias NodeFilter =
    { id : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , membership : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NodeMembership.NodeMembership))
    , name : OptionalArgument (List (Maybe String))
    , role : OptionalArgument (List (Maybe Gql.DockerAPI.Enum.NodeRole.NodeRole))
    }


{-| Encode a NodeFilter into a value that can be used as an argument.
-}
encodeNodeFilter : NodeFilter -> Value
encodeNodeFilter input =
    Encode.maybeObject
        [ ( "id", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.id ), ( "label", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.label ), ( "membership", (Encode.enum Gql.DockerAPI.Enum.NodeMembership.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.membership ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ), ( "role", (Encode.enum Gql.DockerAPI.Enum.NodeRole.toString |> Encode.maybe |> Encode.list) |> Encode.optional input.role ) ]


buildVolumeFilter : (VolumeFilterOptionalFields -> VolumeFilterOptionalFields) -> VolumeFilter
buildVolumeFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { dangling = Absent, driver = Absent, label = Absent, name = Absent }
    in
    { dangling = optionals.dangling, driver = optionals.driver, label = optionals.label, name = optionals.name }


type alias VolumeFilterOptionalFields =
    { dangling : OptionalArgument (List (Maybe Bool))
    , driver : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    }


{-| Type for the VolumeFilter input object.
-}
type alias VolumeFilter =
    { dangling : OptionalArgument (List (Maybe Bool))
    , driver : OptionalArgument (List (Maybe String))
    , label : OptionalArgument (List (Maybe String))
    , name : OptionalArgument (List (Maybe String))
    }


{-| Encode a VolumeFilter into a value that can be used as an argument.
-}
encodeVolumeFilter : VolumeFilter -> Value
encodeVolumeFilter input =
    Encode.maybeObject
        [ ( "dangling", (Encode.bool |> Encode.maybe |> Encode.list) |> Encode.optional input.dangling ), ( "driver", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.driver ), ( "label", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.label ), ( "name", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.name ) ]
