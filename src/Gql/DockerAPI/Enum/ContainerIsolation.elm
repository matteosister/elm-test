-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.DockerAPI.Enum.ContainerIsolation exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Default -
  - Process -
  - Hyperv -

-}
type ContainerIsolation
    = Default
    | Process
    | Hyperv


list : List ContainerIsolation
list =
    [ Default, Process, Hyperv ]


decoder : Decoder ContainerIsolation
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "default" ->
                        Decode.succeed Default

                    "process" ->
                        Decode.succeed Process

                    "hyperv" ->
                        Decode.succeed Hyperv

                    _ ->
                        Decode.fail ("Invalid ContainerIsolation type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ContainerIsolation -> String
toString enum =
    case enum of
        Default ->
            "default"

        Process ->
            "process"

        Hyperv ->
            "hyperv"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ContainerIsolation
fromString enumString =
    case enumString of
        "default" ->
            Just Default

        "process" ->
            Just Process

        "hyperv" ->
            Just Hyperv

        _ ->
            Nothing
