-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.DockerAPI.Enum.ContainerStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Created -
  - Restarting -
  - Running -
  - Removing -
  - Paused -
  - Exited -
  - Dead -

-}
type ContainerStatus
    = Created
    | Restarting
    | Running
    | Removing
    | Paused
    | Exited
    | Dead


list : List ContainerStatus
list =
    [ Created, Restarting, Running, Removing, Paused, Exited, Dead ]


decoder : Decoder ContainerStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "created" ->
                        Decode.succeed Created

                    "restarting" ->
                        Decode.succeed Restarting

                    "running" ->
                        Decode.succeed Running

                    "removing" ->
                        Decode.succeed Removing

                    "paused" ->
                        Decode.succeed Paused

                    "exited" ->
                        Decode.succeed Exited

                    "dead" ->
                        Decode.succeed Dead

                    _ ->
                        Decode.fail ("Invalid ContainerStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ContainerStatus -> String
toString enum =
    case enum of
        Created ->
            "created"

        Restarting ->
            "restarting"

        Running ->
            "running"

        Removing ->
            "removing"

        Paused ->
            "paused"

        Exited ->
            "exited"

        Dead ->
            "dead"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ContainerStatus
fromString enumString =
    case enumString of
        "created" ->
            Just Created

        "restarting" ->
            Just Restarting

        "running" ->
            Just Running

        "removing" ->
            Just Removing

        "paused" ->
            Just Paused

        "exited" ->
            Just Exited

        "dead" ->
            Just Dead

        _ ->
            Nothing
