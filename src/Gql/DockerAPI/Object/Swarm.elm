-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gql.DockerAPI.Object.Swarm exposing (..)

import Gql.DockerAPI.InputObject
import Gql.DockerAPI.Interface
import Gql.DockerAPI.Object
import Gql.DockerAPI.Scalar
import Gql.DockerAPI.ScalarCodecs
import Gql.DockerAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| -}
id : SelectionSet Gql.DockerAPI.ScalarCodecs.Id Gql.DockerAPI.Object.Swarm
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Gql.DockerAPI.ScalarCodecs.codecs |> Gql.DockerAPI.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| -}
version : SelectionSet decodesTo Gql.DockerAPI.Object.SwarmVersion -> SelectionSet (Maybe decodesTo) Gql.DockerAPI.Object.Swarm
version object_ =
    Object.selectionForCompositeField "version" [] object_ (identity >> Decode.nullable)


{-| -}
createdAt : SelectionSet (Maybe Gql.DockerAPI.ScalarCodecs.Date) Gql.DockerAPI.Object.Swarm
createdAt =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "createdAt" [] (Gql.DockerAPI.ScalarCodecs.codecs |> Gql.DockerAPI.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


{-| -}
swarmSpec : SelectionSet decodesTo Gql.DockerAPI.Object.SwarmSpec -> SelectionSet (Maybe decodesTo) Gql.DockerAPI.Object.Swarm
swarmSpec object_ =
    Object.selectionForCompositeField "swarmSpec" [] object_ (identity >> Decode.nullable)


{-| -}
joinTokens : SelectionSet decodesTo Gql.DockerAPI.Object.JoinTokens -> SelectionSet (Maybe decodesTo) Gql.DockerAPI.Object.Swarm
joinTokens object_ =
    Object.selectionForCompositeField "joinTokens" [] object_ (identity >> Decode.nullable)


{-| -}
unlockKey : SelectionSet decodesTo Gql.DockerAPI.Object.UnlockKey -> SelectionSet (Maybe decodesTo) Gql.DockerAPI.Object.Swarm
unlockKey object_ =
    Object.selectionForCompositeField "unlockKey" [] object_ (identity >> Decode.nullable)


type alias NodesOptionalArguments =
    { filter : OptionalArgument Gql.DockerAPI.InputObject.NodeFilter }


{-|

  - filter -

-}
nodes : (NodesOptionalArguments -> NodesOptionalArguments) -> SelectionSet decodesTo Gql.DockerAPI.Object.SwarmNode -> SelectionSet (Maybe (List (Maybe decodesTo))) Gql.DockerAPI.Object.Swarm
nodes fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Gql.DockerAPI.InputObject.encodeNodeFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "nodes" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
